/**
 * File: dominosa.cpp
 * ------------------
 * This animates the brute-force discovery of a solution
 * to a 2 x n dominosa board.
 */

#include <iostream>
#include <cmath>
using namespace std;

#include "simpio.h"
#include "grid.h"
#include "random.h"
#include "dominosa-graphics.h"
#include "set.h"

static bool boardSolver(Vector<Set<int> > pairs, Vector<Vector<int> > numbers, Vector<Vector<int> > usedNumbers, DominosaDisplay& display, Grid<int>& board);

static void welcome() {
	cout << "Here we'll illustrate the use of recursive backtracking to" << endl;
	cout << "discover a solution to various 2 x n Dominosa boards.  In some" << endl;
	cout << "cases there won't be any solutions, and in the cases where there are" << endl;
	cout << "multiple solutions, we'll just find one of them." << endl;
	cout << endl;
}

static int getIntegerInRange(string prompt, int low, int high) {
	while (true) {
		int response = getInteger(prompt);
		if (response == 0 || (response >= low && response <= high)) return response;
		cout << "Sorry, but I can't use that number." << endl;
	}
}

static void populateBoard(Grid<int>& board, int low, int high) {
	for (int row = 0; row < board.numRows(); row++) {
		for (int col = 0; col < board.numCols(); col++) {
			board[row][col] = randomInteger(low, high);
		}
	}
}

static bool canSolveBoard(DominosaDisplay& display, Grid<int>& board) {
    // replace this with your own solution, which will almost certainly be a wrapper function
    Vector<Set<int> >  pairs;
    Vector<Vector<int> > numbers;
    for (int i = 0; i < board.numCols(); i++){
        Vector<int> number;
        number.add(0);
        number.add(i);
        numbers.add(number);
        number[0] = 1;
        numbers.add(number);
    }
    Vector<Vector<int> > usedNumbers;

    return boardSolver(pairs, numbers, usedNumbers, display, board);
}

static bool vectorContainsVector(Vector<int> searchVector, Vector<Vector<int> > v){
    for (int i = 0; i < v.size(); i++){
        if (v[i].toString() == searchVector.toString()) return true;
    }
    return false;
}

static bool vectorContainsSet(Set<int> searchSet, Vector<Set<int> > v){
    for (int i = 0; i < v.size(); i++){
        if (v[i] == searchSet) return true;
    }
    return false;
}

static bool boardSolver(Vector<Set<int> > pairs, Vector<Vector<int> > numbers, Vector<Vector<int> > usedNumbers, DominosaDisplay& display, Grid<int>& board){
    cout << numbers.size() << endl;
    cout << numbers.toString() << endl;
    for (int i = 0; i < numbers.size(); i++){
        cout << i << endl;
        if (!vectorContainsVector(numbers[i], usedNumbers)){
            if (i+1 < numbers.size() && !vectorContainsVector(numbers[i+1], usedNumbers)){
                Set<int> pair;
                pair.add(board.get(numbers[i][0], numbers[i][1]));
                pair.add(board.get(numbers[i+1][0], numbers[i+1][1]));
                if (!vectorContainsSet(pair, pairs)){
                    pairs.add(pair);
                    usedNumbers.add(numbers[i]);
                    usedNumbers.add(numbers[i+1]);
                    coord one;
                    one.row = numbers[i][0];
                    one.col = numbers[i][1];
                    coord two;
                    two.row = numbers[i+1][0];
                    two.col = numbers[i+1][1];
                    display.provisonallyPair(one, two);
                    if (boardSolver(pairs, numbers, usedNumbers, display, board)) return true;
                }else{
                    coord one;
                    one.row = numbers[i][0];
                    one.col = numbers[i][1];
                    coord two;
                    two.row = numbers[i+1][0];
                    two.col = numbers[i+1][1];
                    display.vetoProvisionalPairing(one, two);
                    display.eraseProvisionalPairing(one, two);
                }
            }
            else if (i+2 < numbers.size() && !vectorContainsVector(numbers[i+2], usedNumbers)){
                Set<int> pair;
                pair.add(board.get(numbers[i][0], numbers[i][1]));
                pair.add(board.get(numbers[i+2][0], numbers[i+2][1]));
                if (!vectorContainsSet(pair, pairs)){
                    pairs.add(pair);
                    usedNumbers.add(numbers[i]);
                    usedNumbers.add(numbers[i+2]);
                    coord one;
                    one.row = numbers[i][0];
                    one.col = numbers[i][1];
                    coord two;
                    two.row = numbers[i+2][0];
                    two.col = numbers[i+2][1];
                    display.provisonallyPair(one, two);
                    if (boardSolver(pairs, numbers, usedNumbers, display, board)) return true;
                }else{
                    coord one;
                    one.row = numbers[i][0];
                    one.col = numbers[i][1];
                    coord two;
                    two.row = numbers[i+2][0];
                    two.col = numbers[i+2][1];
                    display.vetoProvisionalPairing(one, two);
                    display.eraseProvisionalPairing(one, two);
                }
            }return false;
        }
    }return true;
}

int main() {
    setRandomSeed(1);
	DominosaDisplay display;
	welcome();
	while (true) {
        int numColumns = getIntegerInRange("How many columns? [0 to exit]: ", 2, 25);
		if (numColumns == 0) break;
		Grid<int> board(2, numColumns);
		populateBoard(board, 1, ceil(2 * sqrt((double) numColumns)));
		display.drawBoard(board);
		if (canSolveBoard(display, board)) {
			cout << "The board can be solved, and one such solution is drawn above." << endl;
		} else {
			cout << "This board you see can't be solved." << endl;
        }
        cout << board.get(0,1);
	}
	
	cout << "Okay, thanks for watching, and come back soon." << endl;
    cout << "Click the mouse anywhere in the window to exit." << endl;
	return 0;
}
